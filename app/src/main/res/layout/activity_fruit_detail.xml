<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_fruit_detail"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:context="com.tiny.demo.firstlinecode.materialdesign.FruitDetailActivity">
    <!--
    顾名思义，CollapsingToolbarLayout是一个作用在ToolBar之上的布局，它可以让ToolBar的效果变得更加丰富，
    不仅仅是展示一个标题栏，而是能够实现非常华丽的效果
    不过，CollapsingToolbarLayout是不能独立存在的，它在设计的时候就被限定只能作为AppBarLayout的直接子类
    来使用，而AppBarLayout又必须是CoordinatorLayout的子布局。
    -->

    <android.support.design.widget.AppBarLayout
        android:id="@+id/appBar"
        android:layout_width="match_parent"
        android:layout_height="250dp"
        android:fitsSystemWindows="true">

        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:fitsSystemWindows="true"
            app:contentScrim="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|exitUntilCollapsed"
            app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
            >
            <!--
            app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar", 指定这个主题的原因是之前的ToolBar
            也是指定的这个主题，只不过这里要实现更加高级的ToolBar效果，因此需要将这个主题的指定提到上一层来。
            app:contentScrim="?attr/colorPrimary"属性用于指定CollapsingToolbarLayout在趋于折叠状态以及
            折叠之后的背景色，其实CollapsingToolbarLayout在折叠之后就是一个普通的ToolBar，那么背景色
            肯定应该是colorPrimary了。
            app:layout_scrollFlags="scroll|exitUntilCollapsed"，上一个页面中这个属性是指定给ToolBar的，
            这里移到上层布局了。scroll表示CollapsingToolbarLayout会随着详情页内容的滚动一期滚动，
            exitUntilCollapsed表示当CollapsingToolbarLayout随着滚顶完成折叠之后就保留在界面上，不再
            移出屏幕。
            -->

            <ImageView
                android:id="@+id/fruit_image_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:fitsSystemWindows="true"
                android:scaleType="centerCrop"
                app:layout_collapseMode="parallax"
                />

            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"
                >

                <!--
                app:layout_collapseMode="parallax"
                用于指定当前空间在CollapsingToolBarLayout折叠过程中的折叠模式，其中ToolBar指定成pin,
                表示在折叠的过程中位置始终保持不变，ImageView制定成parallax，表示在折叠的过程中产生
                一定得错位偏移，这种模式的视觉效果非常好。
                -->

            </android.support.v7.widget.Toolbar>

        </android.support.design.widget.CollapsingToolbarLayout>

    </android.support.design.widget.AppBarLayout>

    <android.support.v4.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        >
        <!--
        NestedScrollView是在ScrollingView基础上还增加了嵌套响应滚动时间的功能
        -->

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="15dp"
                android:layout_marginLeft="15dp"
                android:layout_marginRight="15dp"
                android:layout_marginTop="35dp"
                app:cardCornerRadius="4dp"
                >

                <TextView
                    android:id="@+id/fruit_content_text"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_margin="10dp"
                    />
            </android.support.v7.widget.CardView>

        </LinearLayout>

    </android.support.v4.widget.NestedScrollView>

    <android.support.design.widget.FloatingActionButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        app:srcCompat="@drawable/ic_add"
        app:layout_anchor="@id/appBar"
        app:layout_anchorGravity="bottom|end"
        />
    <!--
      app:layout_anchor="@id/appBar"
      指定了一个锚点，我们将锚点设置为AppBarLayout，这样悬浮按钮就会出现在水果标题栏的区域内。
      接着又使用 app:layout_anchorGravity="bottom|end"属性将炫富按钮定位在标题栏区域的右下角。
    -->

</android.support.design.widget.CoordinatorLayout>
